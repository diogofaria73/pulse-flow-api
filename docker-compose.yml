version: '3.8'

services:
  # Development environment
  db_dev:
    image: postgres:14
    container_name: pulse_flow_db_dev
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pulse_flow_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - pulse_flow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pulse_flow_api_dev
    restart: always
    environment:
      - ENV_FILE=.env.dev
    ports:
      - "8000:8000"
    depends_on:
      db_dev:
        condition: service_healthy
    networks:
      - pulse_flow_network

  # Staging environment
  db_staging:
    image: postgres:14
    container_name: pulse_flow_db_staging
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pulse_flow_db_staging
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_staging:/var/lib/postgresql/data
    networks:
      - pulse_flow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_staging:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pulse_flow_api_staging
    restart: always
    environment:
      - ENV_FILE=.env.staging
    ports:
      - "8001:8000"
    depends_on:
      db_staging:
        condition: service_healthy
    networks:
      - pulse_flow_network

  # Production environment
  db_production:
    image: postgres:14
    container_name: pulse_flow_db_production
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pulse_flow_db_production
    ports:
      - "5434:5432"
    volumes:
      - postgres_data_production:/var/lib/postgresql/data
    networks:
      - pulse_flow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_production:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pulse_flow_api_production
    restart: always
    environment:
      - ENV_FILE=.env.production
    ports:
      - "8002:8000"
    depends_on:
      db_production:
        condition: service_healthy
    networks:
      - pulse_flow_network

networks:
  pulse_flow_network:
    driver: bridge

volumes:
  postgres_data_dev:
  postgres_data_staging:
  postgres_data_production:
